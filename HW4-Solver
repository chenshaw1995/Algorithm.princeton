import edu.princeton.cs.algs4.In;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;

import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
public class Solver {
	/*
	 * a*algorithm runs based on minPQ algorithm.
	 * manhattan+move value PQ
	 */
	private MinPQ<Node> mPQ;
	private ArrayList<Board> solut;
	private int Move=0;
	
	private class Node implements Comparable<Node>{
	private Board prevBoard;
	private Board initBoard;
	//private int move;
	private final int key;
	
	Node(Board init, Board prev){
		initBoard=init;
		prevBoard=prev;
		key=init.manhattan()+Move;
	}

	public int compareTo(Node n) {
		if(key<n.key)return -1;
		else if(key==n.key)return 0;
		else return 1;
	}
	}
	
    public Solver(Board initial){           // find a solution to the initial board (using the A* algorithm)
    	if(initial==null)throw new IllegalArgumentException();
    	mPQ=new MinPQ<Node>();
    	solut=new ArrayList<Board>();
    	//origin=initial;
    	Node inNode= new Node(initial,null);
    	mPQ.insert(inNode);
        while(true){
   		 Node node=mPQ.delMin();
   		 solut.add(node.initBoard);
   		 if(Move>1000)break;//safety protect   		 
   		 if(node.initBoard.isGoal())break;
   		 Move++;
   		 for(Board b:node.initBoard.neighbors()){
   			 if(b==node.prevBoard)continue;
   			 Node nNode = new Node(b, node.initBoard);
   			 mPQ.insert(nNode);
   			 
   		 }
        }
    }
    public boolean isSolvable() {           // is the initial board solvable?
    	if(Move>100)return false;
    	return true;
    }
    public int moves() {                    // min number of moves to solve initial board; -1 if unsolvable
    	if(Move>100)return -1;
    	return Move;
    }
    public Iterable<Board> solution()   {   // sequence of boards in a shortest solution; null if unsolvable
    	return solut;
    }
   
    /*
     * public static void main(String[] args){ // solve a slider puzzle (given below)
     */
    public static void main(String[] args) {

        // create initial board from file
        //In in = new In(args[0]);
        BufferedReader in= new BufferedReader(new InputStreamReader(System.in));
        int n;
		try {
			n = Integer.parseInt(in.readLine());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			n=3;
		}
    	//int n=3;
		//System.out.println(n);
        int[][] blocks = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
				try {
					blocks[i][j] = Integer.parseInt(in.readLine());
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					blocks[i][j]=-1;
				}
        Board initial = new Board(blocks);
        Solver solver = new Solver(initial);

        // print solution to standard output
        if (!solver.isSolvable())
            StdOut.println("No solution possible");
        else {
            StdOut.println("Minimum number of moves = " + solver.moves());
            for (Board board : solver.solution())
                StdOut.println(board);
        }
       
    }
}
