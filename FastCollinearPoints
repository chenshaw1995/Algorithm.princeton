import java.util.Arrays;

public class FastCollinearPoints {
 private LineSegment[] lineS;
 private int num;
 
public FastCollinearPoints(Point[] points) {
  if(points==null)throw new IllegalArgumentException();
  for(Point p: points){
   if(p==null)throw new IllegalArgumentException();;
  }
  Arrays.sort(points);
  int N=points.length;
  for(int i=0;i<N-1;i++){
   if(points[i].compareTo(points[i+1])==0)throw new IllegalArgumentException();
  }
  if(N<4){
	  num=0;
  lineS= new LineSegment[1];
  }
  else{// finds all line segments containing 4 points
  Point p;
  num=0;
  lineS=new LineSegment[N];
    for(int i = 0; i < N; i++) {
     p = points[i];
     Point[] otherPoints=new Point[N-1];
     for(int index=0;index<N;index++){
      if(index<i)otherPoints[index]=points[index];
      if(index>i)otherPoints[index-1]=points[index];
     }
     Arrays.sort(otherPoints, p.slopeOrder());
     double slope=p.slopeTo(otherPoints[0]);
     int count=1;
     int index=0;
     for(int m=0;m<otherPoints.length;m++){
      if(Double.compare(slope, p.slopeTo(otherPoints[m]))==0)   {
       count++;
       continue;
      }
      else{//!=
       double s2=p.slopeTo(otherPoints[m]);
       if(count>=4){//s2!=slope
    	   if(otherPoints[index].compareTo(p)>0){
    		   lineS[num++]=new LineSegment(p,otherPoints[m-1]);
    		   if(num==lineS.length-1)
		         {
		        	 LineSegment[] tempLines=new LineSegment[2*lineS.length];
		        	 for(int k=0;k<lineS.length;k++){
		        		 tempLines[k]=lineS[k];
		        	 }
		        	 lineS=tempLines;
		         }
    	   }
        }
       count=2;
       index=m;
       slope=s2;
       }
     }//for loop
     
     if(count<4){  }
  else{//count>=4,s2!=slope
	  if(count>=4){//s2!=slope
   	   if(otherPoints[index].compareTo(p)>0){
   		   lineS[num++]=new LineSegment(p,otherPoints[otherPoints.length-1]);
   	   }
       }
  }
	  }//outer for loop
  }
   }
   public           int numberOfSegments()  {      // the number of line segments
    return num;
   }
   public LineSegment[] segments()  {              // the line segments
	   int i=0;
		LineSegment[] l=new LineSegment[num];
		while(lineS[i]!=null&&i<num){
			l[i]=lineS[i];
			i++;
		}
		lineS=l;
    return lineS;
    
    
   }
}

/*if(p.slopeTo(points[m])==p.slopeTo(points[n])&&p.slopeTo(points[n])==p.slopeTo(points[o])){
 if(points[m].slopeTo(points[n]) == -p.slopeTo(points[m]) && p.slopeTo(points[m]) == -points[m].slopeTo(points[o]))
 lineS[num++]=new LineSegment(p,points[m]);//p,n/o,m
 else if(points[m].slopeTo(points[n]) == p.slopeTo(points[m]) && p.slopeTo(points[m]) == -points[m].slopeTo(points[o]))      
 lineS[num++]=new LineSegment(p,points[n]);//p,o,m,n
 else if(points[m].slopeTo(points[n]) == -p.slopeTo(points[m]) && p.slopeTo(points[m]) == points[m].slopeTo(points[o]))      
 lineS[num++]=new LineSegment(p,points[o]);//p,n,m,o
 else {//p,m,
  if(points[m].slopeTo(points[n]) == points[n].slopeTo(points[o]))
   lineS[num++]=new LineSegment(p,points[o]);//p,m,n,o
  else  lineS[num++]=new LineSegment(p,points[n]);//p,m,o,n
 }  
}
else{}*/
  
