import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdOut;
public class Solver {
	/*
	 * a*algorithm runs based on minPQ algorithm.
	 * manhattan+move value PQ
	 */
	private static MinPQ<Node> mPQ;
	private static Stack<Board> solut;
	private static Node destinate;
	
	private class Node implements Comparable<Node>{
	private Node prev;
	private Board board;
	private final int key;
	private final int move;
	private final boolean isTwin;
	
	Node(Board init, Node prev,int m, boolean t){
		board=init;
		this.prev=prev;
		move=m;
		key=init.manhattan()+move;
		isTwin=t;
	}

	public int compareTo(Node n) {
		if(key<n.key)return -1;
		else if(key==n.key)return 0;
		else return 1;
	}
	}
	
    public Solver(Board initial){           // find a solution to the initial board (using the A* algorithm)
    	if(initial==null)throw new IllegalArgumentException();
    	mPQ=new MinPQ<Node>();
    	solut=new Stack<Board>();
    	Node nodetwin=new Node(initial.twin(),null,0, true);
    	Node node= new Node(initial, null, 0,false);
    	mPQ.insert(node);
    	mPQ.insert(nodetwin);
        while(true){
   		 node=mPQ.delMin();//reduce over exceed number calls to mPQ
   		 if(node.board.isGoal())break;
   		 for(Board b:node.board.neighbors()){
   			 if(node.prev!=null&&b.equals(node.prev.board))continue;
   			 mPQ.insert(new Node(b, node, node.move+1, node.isTwin)); 
   		 }
        }
        destinate=node;
    }
    public boolean isSolvable() {           // is the initial board solvable?
    	return !destinate.isTwin;
    }
    public int moves() {                    // min number of moves to solve initial board; -1 if unsolvable
    	if(!isSolvable())return -1;
    	Node p=destinate;
    	int i=0;
    	while(p.prev!=null){
    		p=p.prev;
    		i++;
    	}
    	return i;
    }
    public Iterable<Board> solution()   {   // sequence of boards in a shortest solution; null if unsolvable
    	if(!isSolvable())return null;
    	Node p=destinate;
    	while(p.prev!=null){
    		solut.push(p.board);
    		p=p.prev;
    	}
    	solut.push(p.board);
    	return solut;
    }
   
    /*
     * public static void main(String[] args){ // solve a slider puzzle (given below)
     */
    public static void main(String[] args) {


        // create initial board from file
        In in = new In(args[0]);
        int n = in.readInt();
        int[][] blocks = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                blocks[i][j] = in.readInt();
        Board initial = new Board(blocks);

        // solve the puzzle
        Solver solver = new Solver(initial);

        // print solution to standard output
        if (!solver.isSolvable())
            StdOut.println("No solution possible");
        else {
            StdOut.println("Minimum number of moves = " + solver.moves());
            for (Board board : solver.solution())
                StdOut.println(board);
        }	
/*/
    	// create initial board from file
        //In in = new In(args[0]);
        //int n = in.readInt();
    	int n=7;
    	int m=0;
        int[][] blocks = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                blocks[i][j] = Integer.parseInt(args[m++]);
        Board initial = new Board(blocks);

        // solve the puzzle
        Solver solver = new Solver(initial);

        // print solution to standard output
        if (!solver.isSolvable())
            StdOut.println(solver.moves()+"No solution possible");
        else {
            StdOut.println("Minimum number of moves = " + solver.moves());
            for (Board board : solver.solution())
                StdOut.println(board);
        }
        //*/
    }
    
}
