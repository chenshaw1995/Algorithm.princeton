import java.util.ArrayList;

import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;

public class Board {
	private int[][] board;
	private final int dimension;
	//private final Iterable<Board> neighbor;
    public Board(int[][] blocks){           // construct a board from an n-by-n array of blocks
    	dimension=blocks.length;
    	board=new int[dimension][dimension];
    	for(int i=0;i<dimension;i++){
    		for(int j=0;j<dimension;j++){
    			board[i][j]=blocks[i][j];
    		}
    	}
    	//neighbor=neighbors();
    }
                                           // (where blocks[i][j] = block in row i, column j)
    public int dimension()   {              // board dimension n
    	return dimension;
    }
    public int hamming()  {                 // number of blocks out of place
    	int count=0;
    	for(int i=0;i<dimension;i++){
    		for(int j=0;j<dimension;j++){
    			int targetNum=i*dimension+j+1;
    			if(targetNum==dimension*dimension)break;
    			if(board[i][j]!=targetNum){
    				//StdOut.println(targetNum+"| "+"1;");
    				count++;
    			}else {
    				//StdOut.println(targetNum+"| "+"0;");
    			}
    		}
    	}
    	return count;
    }
    public int manhattan() {                // sum of Manhattan distances between blocks and goal
    	int sum=0;
    	int M=1;
    	for(int i=0;i<dimension;i++){
    		for(int j=0;j<dimension;j++){
    			int targetNum=M++;
    			if(board[i][j]==0)continue;
    			if(board[i][j]!=targetNum){
    				int bi=(board[i][j]-1)/dimension;
    				int bj=(board[i][j]-1)%dimension;
    				int m=Math.abs(bi-i)+Math.abs(bj-j);
    				//test :StdOut.println(board[i][j]+"|"+m);
    				sum+=m;
    			}else {
    				//test: StdOut.println(board[i][j]+"|0");
    			}
    		}
    	}
    	return sum;
    }
    public boolean isGoal() {                // is this board the goal board?
    	return hamming()==0&&manhattan()==0;
    }
    public Board twin()            {        // a board that is obtained by exchanging any pair of blocks
    	 Board tBoard= new Board(board);
    	 int ii=StdRandom.uniform(dimension);
    	 int jj=StdRandom.uniform(dimension);
    	 if(ii!=0){
    		 swap(tBoard.board, ii , jj, ii-1, jj );
    	 }
    	 return tBoard;
    }
    public boolean equals(Object y)   {     // does this board equal y?
    	if(y instanceof Board){
    		if(((Board) y).dimension()!=dimension)return false;
    		for(int i=0;i<dimension;i++){
    			for(int j=0;j<dimension;j++){
    				if(((Board) y).board[i][j]==board[i][j]){}
    				else return false;
    			}
    		}
    		return true;
    	}else return false;
    }
    public Iterable<Board> neighbors() {    // all neighboring boards
    	ArrayList<Board> neighbor=new ArrayList<Board>();
    	//test: StdOut.println(toString());
    	//test:    	StdOut.println(i0+" "+j0+" ");
    	for(int i0=0;i0<dimension;i0++){
    		for(int j0=0;j0<dimension;j0++){
    			if(board[i0][j0]==0){
    				if(i0>0){
    		    		Board nBoard=new Board(board);
    		    		swap(nBoard.board, i0, j0, i0-1, j0);
    		    		neighbor.add(nBoard);
    		    	}
    		    	if(i0<dimension-1){
    		    		Board nBoard=new Board(board);
    		    		swap(nBoard.board, i0, j0, i0+1, j0);
    		    		neighbor.add(nBoard);
    		    	}
    		    	if(j0>0){
    		    		Board nBoard=new Board(board);
    		    		swap(nBoard.board, i0, j0, i0, j0-1);
    		    		neighbor.add(nBoard);
    		    	}
    		    	if(j0<dimension-1){
    		    		Board nBoard=new Board(board);
    		    		swap(nBoard.board, i0, j0, i0, j0+1);
    		    		neighbor.add(nBoard);
    		    	}
    		    	return neighbor; 
    			}else;
    		}
    	}
    	StdOut.print("err");
    	return null;
    	//test:StdOut.println(i0+" "+j0+" ");
    	//assert j0<3&&j0>=0;
    }
    public String toString()  {             // string representation of this board (in the output format specified below)
    	String s="";
    	for(int i=0;i<dimension;i++){
    		for(int j=0;j<dimension;j++){
    			s+="|"+board[i][j]+" ";
    		}
    		s+="\n";
    	}
    	return s;
    }

    private void swap(int[][] board, int a1, int b1, int a2, int b2 ){
    	int tempt=board[a1][b1];
    	board[a1][b1]=board[a2][b2];
    	board[a2][b2]=	tempt;
    	
    }
    public static void main(String[] args) {// unit tests (not graded)
    	
    }
}
