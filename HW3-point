import java.util.Comparator;

public class Point implements Comparable<Point> {
	private final int x;
	private final int y;
	
   public Point(int x, int y)              {           // constructs the point (x, y)
	   this.x=x;
	   this.y=y;
   }

   public   void draw()                 {              // draws this point
	   
   }
   public   void drawTo(Point that)    {               // draws the line segment from this point to that point
   }
   public String toString()             {              // string representation
	   return "["+x+","+y+"]";
   }

   public   int compareTo(Point that)  {   // compare two points by y-coordinates, breaking ties by x-coordinates
	   if(this.y<that.y)return -1;
	   else if(this.y==that.y){
		   if(this.x<that.x)return -1;
		   else if(this.x==that.x) return 0;
		   else return 1;
	   }
	   else return 1;
   }
   
   public            double slopeTo(Point that)    {   // the slope between this point and that point
	   if(this.x==that.x){
		   if(this.y==that.y){
			   return Double.NEGATIVE_INFINITY;
		   }else{
			   return Double.POSITIVE_INFINITY;
		   }
	   }
	   else {
		   if(this.y==that.y)return +0.0;
		   return (double)(that.y-this.y)/(that.x-this.x);
	   }
   }
   public Comparator<Point> slopeOrder()         {     // compare two points by slopes they make with this point
	  return new SlopeC();
   }
 /*
   public static void main(String[] args){
	  Point p0=new Point(0,0);
	  Point p1=new Point(1,1);
	  Point p2=new Point(1,0);
	  Point p3=new Point(0,1);
	  Point p4=new Point(2,2);
	  Point p5=new Point(2,3);
	  System.out.println(p0);
	  System.out.println(p0+" "+p0.slopeTo(p0));
	  System.out.println(p1+" "+p0.slopeTo(p1));
	  System.out.println(p2+" "+p0.slopeTo(p2));
	  System.out.println(p3+" "+p0.slopeTo(p3));
	  System.out.println(p4+" "+p0.slopeTo(p4));
	  System.out.println(p0+": "+p5+" & "+p1+" "+p0.slopeOrder().compare(p5, p1));
	  
  }
 */
 private class SlopeC implements Comparator<Point>{

		public int compare(Point arg0, Point arg1) {
			if(slopeTo(arg0)<slopeTo(arg1))return -1;
			else if(slopeTo(arg0)==slopeTo(arg1)) return 0;
			else return +1;
		}
		   
	   }

}
